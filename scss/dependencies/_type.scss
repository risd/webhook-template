/* --------------------------------------------------------

font-face definitions

-------------------------------------------------------- */

@font-face {
  font-family: 'Modern Pictograms Pro';
  font-weight: 100;
  src: url("../fonts/modernpictogramspro_234.woff");
}


/* --------------------------------------------------------

type extends

-------------------------------------------------------- */

%sans-serif {
  font-family: "", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
}

%serif {
  font-family: "", "Georgia", "Times New Roman", "Times", serif;
}

%antialiased {
  -webkit-font-smoothing:antialiased;
  -moz-font-smoothing:antialiased;
  font-smoothing:antialiased;
}

%pictographic {
  font-family: "Modern Pictograms";
  line-height: 1;
}

%all-caps {
  text-transform: uppercase;
  letter-spacing: 0.1em;
}

%inline-link {
  border-bottom: 1px dotted;
  // border-color: ;

  &:hover {
    // color: ;
  }
}


/* --------------------------------------------------------

Remove the unit of a length
@param {Number} $number - Number to remove unit from
@return {Number} - Unitless number

-------------------------------------------------------- */
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


/* --------------------------------------------------------

Variable Map Lists for the text-size mixin

Example:
$font-size-variable: (
  responsive-size--1: (font-size[px], line-height[px]),
  responsive-size--2: (font-size[px], line-height[px])
);

-------------------------------------------------------- */

$xs: (
  base: (14px, 20px)
);

$s: (
  base: (21px, 30px)
);

$m: (
  base: (35px, 40px)
);

$l: (
  base: (42px, 50px)
);

$xl: (
  base: (54px, 60px)
);

$xxl: (
  base: (54px, 60px)
);


/* --------------------------------------------------------

Mixin for font-size and line-height definition
  Usage Example: @include text-size($font-size-variable);

-------------------------------------------------------- */

@mixin text-size($fs-map: $regular, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $keyNumber in $fs-map {

    @if map-has-key($fs-breakpoints, $fs-breakpoint) {
    } @else {
      @warn "Breakpoints have not been defined correctly";
    }

    // @debug $fs-map;
    // @debug $fs-breakpoint;
    // @debug $keyNumber;

    $fontSize: nth($keyNumber, 1);
    $leading: nth($keyNumber, 2);
    $leading-unitless: calc(#{strip-unit($leading)} / #{strip-unit($fontSize)});

    // @debug $fontSize;
    // @debug $leading;
    // @debug $leading-unitless;

    // @debug map-get($breakpoints, $fs-breakpoint);

    @include media(min-width map-get($breakpoints, $fs-breakpoint)) {
      font-size: $fontSize;
      line-height: $leading-unitless;
    };
  }
}
